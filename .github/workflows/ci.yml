name: Build and Deploy

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Configure npm
        run: |
          npm config set legacy-peer-deps true
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set fetch-retries 5

      - name: Create project structure
        run: |
          mkdir -p apps/web/src/{types,components,providers,lib,app}
          mkdir -p apps/web/.vercel
          mkdir -p apps/web/public
          mkdir -p packages/{tsconfig,ton-client/src,quantum-core/src,ai-core/src,ton-utils/src}

      - name: Create required files
        run: |
          # Clean up problematic files
          rm -f pages/sample-page.tsx
          rm -f apps/web/pages/sample-page.tsx
          
          # Vercel config in apps/web directory
          cat > apps/web/vercel.json << 'EOF'
          {
            "framework": "nextjs",
            "buildCommand": "npm run build",
            "outputDirectory": ".next",
            "routes": [
              {
                "src": "/ton-connect/(.*)",
                "dest": "/api/ton-connect/$1"
              },
              {
                "src": "/donacije",
                "dest": "/donacije",
                "headers": {
                  "Cache-Control": "public, max-age=3600"
                }
              },
              {
                "src": "/(.*)",
                "dest": "/$1"
              }
            ]
          }
          EOF
          
          # TonConnect manifest
          cat > apps/web/public/tonconnect-manifest.json << 'EOF'
          {
            "url": "https://melektron.ai",
            "name": "Melektron AI",
            "iconUrl": "https://melektron.ai/logo.png",
            "termsOfServiceUrl": "https://melektron.ai/terms",
            "privacyPolicyUrl": "https://melektron.ai/privacy"
          }
          EOF
          
          # Vanta types
          cat > apps/web/src/types/vanta.d.ts << 'EOF'
          declare global {
            interface Window {
              THREE?: any;
              VANTA?: any;
            }
          }
          declare module 'vanta/dist/vanta.net.min' {
            interface VantaNetOptions {
              el: HTMLElement;
              THREE?: any;
              [key: string]: any;
            }
            interface VantaEffect { destroy(): void; }
            function NET(options: VantaNetOptions): VantaEffect;
            export default NET;
          }
          export {}
          EOF
          
          # TON Utils
          cat > apps/web/src/lib/ton-utils.ts << 'EOF'
          import { Address, toNano } from '@ton/ton'
          
          export function initTON(config?: {
            network?: 'mainnet' | 'testnet'
            apiKey?: string
          }) {
            return {
              network: config?.network || 'mainnet',
              apiKey: config?.apiKey || process.env.TON_API_KEY,
              isMainnet: (config?.network || 'mainnet') === 'mainnet'
            }
          }
          
          export class TonUtils {
            static parseAddress(address: string): Address {
              return Address.parse(address)
            }
            static toNanoTon(amount: string | number): bigint {
              return toNano(amount)
            }
            static createTransferMessage(to: string, amount: string | number) {
              return {
                validUntil: Math.floor(Date.now() / 1000) + 300,
                messages: [{ address: this.parseAddress(to), amount: this.toNanoTon(amount) }]
              }
            }
          }
          
          export default TonUtils
          EOF

      - name: Fix TonProvider component
        run: |
          cat > apps/web/src/providers/TonProvider.tsx << 'EOF'
          'use client'
          
          import { createContext, useContext, useState, ReactNode } from 'react'
          import { TonConnectUIProvider, THEME } from '@tonconnect/ui-react'
          
          interface TonWallet {
            address?: string;
            balance?: string;
            connected: boolean;
          }
          
          interface TonContextType {
            wallet: TonWallet;
            connect: () => Promise<void>;
            disconnect: () => void;
            isConnecting: boolean;
          }
          
          const TonContext = createContext<TonContextType | undefined>(undefined)
          
          export function useTonWallet() {
            const context = useContext(TonContext)
            if (context === undefined) {
              throw new Error('useTonWallet must be used within a TonProvider')
            }
            return context
          }
          
          interface TonProviderProps {
            children: ReactNode;
          }
          
          export default function TonProvider({ children }: TonProviderProps) {
            const [wallet, setWallet] = useState<TonWallet>({ connected: false })
            const [isConnecting, setIsConnecting] = useState(false)
          
            const connect = async () => {
              try {
                setIsConnecting(true)
                await new Promise(resolve => setTimeout(resolve, 1000))
                setWallet({ address: 'EQD...mock', balance: '100.0', connected: true })
              } catch (error) {
                console.error('Failed to connect wallet:', error)
              } finally {
                setIsConnecting(false)
              }
            }
          
            const disconnect = () => setWallet({ connected: false })
            const value = { wallet, connect, disconnect, isConnecting }
          
            return (
              <TonConnectUIProvider 
                manifestUrl="/tonconnect-manifest.json"
                uiPreferences={{ theme: THEME.DARK }}
              >
                <TonContext.Provider value={value}>
                  {children}
                </TonContext.Provider>
              </TonConnectUIProvider>
            )
          }
          
          export { TonProvider }
          EOF

      - name: Install dependencies
        run: |
          npm install --legacy-peer-deps || \
          (sleep 30 && npm install --legacy-peer-deps) || \
          (sleep 60 && npm install --legacy-peer-deps)

      - name: Build project
        run: npm run build:web

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/web
          vercel-args: '--prod'