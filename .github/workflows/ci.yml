name: Build and Deploy

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Configure npm
        run: |
          npm config set legacy-peer-deps true
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set fetch-retries 5

      - name: Create project structure
        run: |
          mkdir -p apps/web/src/{types,components,providers,lib,app}
          mkdir -p apps/web/.vercel
          mkdir -p packages/{tsconfig,ton-client/src,quantum-core/src,ai-core/src,ton-utils/src}
          mkdir -p apps/web/public

      - name: Create required files
        run: |
          # Clean up old problematic files
          rm -f pages/sample-page.tsx
          rm -f apps/web/pages/sample-page.tsx
          
          # TonConnect manifest
          cat > apps/web/public/tonconnect-manifest.json << 'EOF'
          {
            "url": "https://melektron.ai",
            "name": "Melektron AI",
            "iconUrl": "https://melektron.ai/logo.png",
            "termsOfServiceUrl": "https://melektron.ai/terms",
            "privacyPolicyUrl": "https://melektron.ai/privacy"
          }
          EOF
          
          # Vanta types
          cat > apps/web/src/types/vanta.d.ts << 'EOF'
          declare global {
            interface Window {
              THREE?: any;
              VANTA?: any;
            }
          }
          declare module 'vanta/dist/vanta.net.min' {
            interface VantaNetOptions {
              el: HTMLElement;
              THREE?: any;
              [key: string]: any;
            }
            interface VantaEffect { destroy(): void; }
            function NET(options: VantaNetOptions): VantaEffect;
            export default NET;
          }
          export {}
          EOF

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build project
        run: |
          npm run build:web || (cd apps/web && npm run build)

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/web
          vercel-args: '--prod'