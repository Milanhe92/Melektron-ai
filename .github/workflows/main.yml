name: Build and Deploy

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      CI: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Configure npm
        run: |
          npm config set legacy-peer-deps true
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set fetch-retries 5
          npm config set fetch-timeout 300000

      - name: Create project structure
        run: |
          mkdir -p apps/web/src/{types,components,providers,lib,app}
          mkdir -p apps/web/.vercel
          mkdir -p packages/{tsconfig,ton-client/src,quantum-core/src,ai-core/src,ton-utils/src}

      - name: Create missing files
        run: |
          # Create tsconfig files
          cat > packages/tsconfig/package.json << 'EOF'
          {
            "name": "tsconfig",
            "version": "0.0.0",
            "private": true,
            "files": ["base.json", "nextjs.json"]
          }
          EOF
          
          cat > packages/tsconfig/nextjs.json << 'EOF'
          {
            "extends": "./base.json",
            "compilerOptions": {
              "target": "es5",
              "lib": ["dom", "dom.iterable", "esnext"],
              "allowJs": true,
              "noEmit": true,
              "module": "esnext",
              "moduleResolution": "bundler",
              "jsx": "preserve",
              "incremental": true,
              "plugins": [{"name": "next"}],
              "baseUrl": ".",
              "paths": {
                "@/*": ["./src/*"]
              }
            },
            "include": ["src", "next-env.d.ts", "**/*.ts", "**/*.tsx"],
            "exclude": ["node_modules"]
          }
          EOF

          cat > packages/tsconfig/base.json << 'EOF'
          {
            "compilerOptions": {
              "target": "ES2020",
              "module": "commonjs",
              "lib": ["ES2020"],
              "declaration": true,
              "esModuleInterop": true,
              "skipLibCheck": true,
              "strict": true,
              "moduleResolution": "node",
              "resolveJsonModule": true,
              "forceConsistentCasingInFileNames": true
            },
            "exclude": ["node_modules", "**/*.test.ts", "**/*.spec.ts"]
          }
          EOF

          # Create Vanta types
          cat > apps/web/src/types/vanta.d.ts << 'EOF'
          declare global {
            interface Window {
              THREE?: any;
              VANTA?: any;
            }
          }
          
          declare module 'vanta/dist/vanta.net.min' {
            interface VantaNetOptions {
              el: HTMLElement;
              THREE?: any;
              color?: number;
              backgroundColor?: number;
              points?: number;
              maxDistance?: number;
              spacing?: number;
              mouseControls?: boolean;
              touchControls?: boolean;
              gyroControls?: boolean;
              [key: string]: any;
            }
            interface VantaEffect {
              destroy(): void;
            }
            function NET(options: VantaNetOptions): VantaEffect;
            export default NET;
          }
          
          export {}
          EOF

      - name: Install dependencies with retry
        run: |
          npm install --legacy-peer-deps || \
          (sleep 30 && npm install --legacy-peer-deps) || \
          (sleep 60 && npm install --legacy-peer-deps)

      - name: Build packages
        run: |
          npm run build:packages || echo "Some packages failed, continuing..."

      - name: Build web app
        run: |
          cd apps/web && npm run build

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel
        run: |
          cd apps/web
          echo '{"projectId":"${{ secrets.VERCEL_PROJECT_ID }}","orgId":"${{ secrets.VERCEL_ORG_ID }}"}' > .vercel/project.json
          vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} --yes
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}